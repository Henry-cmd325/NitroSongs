// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NitroSongs.Infrastructure.Persistence.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NitroSongs.Infrastructure.Migrations
{
    [DbContext(typeof(NitroSongsDbContext))]
    [Migration("20250830030657_ChordType Added")]
    partial class ChordTypeAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NitroSongs.Domain.Entities.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Chord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChordTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("chord_type_id");

                    b.Property<string>("CodeEn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_en");

                    b.Property<string>("CodeEs")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code_es");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ChordTypeId");

                    b.ToTable("chords", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ChordTone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChordId")
                        .HasColumnType("bigint")
                        .HasColumnName("chord_id");

                    b.Property<long>("ToneId")
                        .HasColumnType("bigint")
                        .HasColumnName("tone_id");

                    b.HasKey("Id");

                    b.HasIndex("ChordId");

                    b.HasIndex("ToneId");

                    b.ToTable("chord_tones", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ChordType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.ToTable("chord_types", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ImageChords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChordId")
                        .HasColumnType("bigint")
                        .HasColumnName("chord_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ChordId");

                    b.ToTable("image_chords", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Rhythm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("img_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("rhythms", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("GenreId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("Lyrics")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lyrics");

                    b.Property<long>("RhythmId")
                        .HasColumnType("bigint")
                        .HasColumnName("rhythm_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<long>("ToneId")
                        .HasColumnType("bigint")
                        .HasColumnName("tone_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("RhythmId");

                    b.HasIndex("ToneId");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.SongChord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChordId")
                        .HasColumnType("bigint")
                        .HasColumnName("chord_id");

                    b.Property<int>("LetterIndex")
                        .HasColumnType("integer")
                        .HasColumnName("letter_index");

                    b.Property<int>("PixelMovement")
                        .HasColumnType("integer")
                        .HasColumnName("pixel_movement");

                    b.Property<long>("SongId")
                        .HasColumnType("bigint")
                        .HasColumnName("song_id");

                    b.Property<int>("WordIndex")
                        .HasColumnType("integer")
                        .HasColumnName("word_index");

                    b.HasKey("Id");

                    b.HasIndex("ChordId");

                    b.HasIndex("SongId");

                    b.ToTable("song_chords", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Tone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tones", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.UserSong", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("SongId")
                        .HasColumnType("bigint")
                        .HasColumnName("song_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("user_songs", (string)null);
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Chord", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.ChordType", "ChordType")
                        .WithMany("Chords")
                        .HasForeignKey("ChordTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChordType");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ChordTone", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.Chord", "Chord")
                        .WithMany("ChordTones")
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.Tone", "Tone")
                        .WithMany("ChordTones")
                        .HasForeignKey("ToneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chord");

                    b.Navigation("Tone");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ImageChords", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.Chord", "Chord")
                        .WithMany("ImageChords")
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chord");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Song", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.Author", "Author")
                        .WithMany("Songs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.Rhythm", "Rhythm")
                        .WithMany("Songs")
                        .HasForeignKey("RhythmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.Tone", "Tone")
                        .WithMany("Songs")
                        .HasForeignKey("ToneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Rhythm");

                    b.Navigation("Tone");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.SongChord", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.Chord", "Chord")
                        .WithMany("SongChords")
                        .HasForeignKey("ChordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.Song", "Song")
                        .WithMany("SongChords")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chord");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.UserSong", b =>
                {
                    b.HasOne("NitroSongs.Domain.Entities.Song", "Song")
                        .WithMany("UserSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NitroSongs.Domain.Entities.User", "User")
                        .WithMany("UserSongs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Author", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Chord", b =>
                {
                    b.Navigation("ChordTones");

                    b.Navigation("ImageChords");

                    b.Navigation("SongChords");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.ChordType", b =>
                {
                    b.Navigation("Chords");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Rhythm", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Song", b =>
                {
                    b.Navigation("SongChords");

                    b.Navigation("UserSongs");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.Tone", b =>
                {
                    b.Navigation("ChordTones");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("NitroSongs.Domain.Entities.User", b =>
                {
                    b.Navigation("UserSongs");
                });
#pragma warning restore 612, 618
        }
    }
}
